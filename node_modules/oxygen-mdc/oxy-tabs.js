var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html } from 'lit';
import { customElement, property } from 'lit/decorators';
/**
 * A simple tab bar component that ensures only one <oxy-tab> is active at a
 * time. Example:
 *
 *   <oxy-tabs>
 *     <oxy-tab selected>Pizza</oxy-tab>
 *     <oxy-tab>Pasta</oxy-tab>
 *   </oxy-tabs>
 */
let OxyTabs = class OxyTabs extends LitElement {
    constructor() {
        super();
        this.orientation = 'horizontal';
        this.selected = 0;
        this.setAttribute('role', 'tablist');
        this.addEventListener('click', this.onClick);
    }
    static get styles() {
        return css `
      :host {
        display: flex;
      }
      :host([orientation="horizontal"]) {
        flex-direction: row;
        border-bottom: var(--oxy-tabs-border, 1px solid black);
      }
      :host([orientation="vertical"]) {
        flex-direction: column;
        border-left: var(--oxy-tabs-border, 1px solid black);
      }
    `;
    }
    connectedCallback() {
        super.connectedCallback();
        // this.applyOrientationToChildren();
    }
    updated(changedProps) {
        if (changedProps.has('orientation')) {
            this.applyOrientationToChildren();
        }
        if (changedProps.has('selected')) {
            this.selectTabIndex(this.selected);
        }
    }
    render() {
        return html `<slot></slot>`;
    }
    applyOrientationToChildren() {
        console.log('applying orientation', this.orientation);
        this.childNodes.forEach(node => {
            if (node.nodeType != Node.ELEMENT_NODE)
                return;
            const elem = (node);
            elem.setAttribute('orientation', this.orientation);
        });
    }
    onClick(event) {
        // Iterate the tree up to find direct child clicked on.
        let clickedChild = event.target;
        while (clickedChild) {
            if (clickedChild.parentElement === this)
                break;
            clickedChild = clickedChild.parentElement;
        }
        if (!clickedChild)
            return;
        // Find index of direct child.
        const children = this.getDirectChildren();
        this.selected = children.indexOf(clickedChild);
    }
    selectTabIndex(selectedIndex) {
        const children = this.getDirectChildren();
        children.forEach((child, index) => {
            if (index === selectedIndex) {
                child.setAttribute('selected', '');
            }
            else {
                child.removeAttribute('selected');
            }
        });
    }
    getDirectChildren() {
        let children = [];
        this.childNodes.forEach(node => {
            if (node.nodeType != Node.ELEMENT_NODE)
                return;
            children.push(node);
        });
        return children;
    }
};
__decorate([
    property({ type: String, reflect: true })
], OxyTabs.prototype, "orientation", void 0);
__decorate([
    property({ type: Number, reflect: true })
], OxyTabs.prototype, "selected", void 0);
OxyTabs = __decorate([
    customElement('oxy-tabs')
], OxyTabs);
export { OxyTabs };
