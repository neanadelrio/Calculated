var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html } from 'lit';
import { customElement, property } from 'lit/decorators';
/**
 * A toast that pops up on the bottom left side of the window. The toast can
 * be opened using the convenience functions below for short, normal and long
 * default durations.
 */
let OxyToast = class OxyToast extends LitElement {
    constructor() {
        super(...arguments);
        this.timeoutId = -1;
        this.opened = false;
        this.message = '';
    }
    static get styles() {
        return css `
      :host {
        position: fixed;
        bottom: 16px;
        left: 16px;
        z-index: 3;

        opacity: 0;
        transform: translateY(100px);
        transition: transform 200ms, opacity 200ms;
      }
      :host([opened]) {
        opacity: 1;
        transform: translateY(0);
      }
      #container {
        display: flex;
        flex-direction: row;
        align-items: center;
        min-height: 40px;
        box-sizing: border-box;
        padding: 8px 16px;
        background: var(--oxy-toast-background, #090909);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);
      }
    `;
    }
    render() {
        return html `
      <div id="container">
        <div id="message" ?hidden=${!this.message}>${this.message}</div>
        <slot></slot>
      </div>
    `;
    }
    /** Opens the toast for 2 seconds. */
    openShort(message = '') {
        this.open(2000, message);
    }
    /** Opens the toast for 3.5 seconds. */
    openNormal(message = '') {
        this.open(3500, message);
    }
    /** Opens the toast for 6 seconds. */
    openLong(message = '') {
        this.open(6000, message);
    }
    /** Opens the toast, and auto-closes the toast if duration is set > 0. */
    open(durationMs, message) {
        this.message = message;
        this.opened = true;
        this.setTimeout(durationMs);
    }
    /** Closes the toast. */
    close() {
        this.opened = false;
        this.setTimeout(0);
    }
    setTimeout(durationMs) {
        if (this.timeoutId >= 0) {
            window.clearTimeout(this.timeoutId);
        }
        if (durationMs > 0) {
            this.timeoutId = window.setTimeout(() => {
                this.timeoutId = -1;
                this.close();
            }, durationMs);
        }
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], OxyToast.prototype, "opened", void 0);
__decorate([
    property({ type: String })
], OxyToast.prototype, "message", void 0);
OxyToast = __decorate([
    customElement('oxy-toast')
], OxyToast);
export { OxyToast };
