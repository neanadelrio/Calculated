var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html } from 'lit';
import { customElement, property } from 'lit/decorators';
/**
 * A simple slider component.
 */
let OxySlider = class OxySlider extends LitElement {
    constructor() {
        super(...arguments);
        this.dragging = false;
        this.buttons = 0;
        this.disabled = false;
        this.min = 0;
        this.max = 100;
        this.value = 0;
    }
    static get styles() {
        return css `
      :host {
        display: flex;
        flex-direction: column;
        min-width: 150px;
        position: relative;

        border-radius: 4px;
        outline: none;
        cursor: pointer;
        user-select: none;
      }
      :host([disabled]) {
        opacity: 0.5;
        pointer-events: none;
      }

      :host::after {
        position: absolute;
        top: 0;
        left: -2px;
        bottom: 0;
        right: -2px;
        pointer-events: none;
        border-radius: inherit;
        content: "";
      }
      :host(:focus-visible)::after {
        box-shadow: 0 0 0 2px var(--oxy-slider-focus-color, cornflowerblue);
      }

      #container {
        position: relative;
      }
      #track {
        background-color: var(--oxy-slider-track-color, #666);
        height: var(--oxy-slider-track-height, 2px);
        margin: 16px 0;
      }
      :host(:active) #track {
        background-color: var(--oxy-slider-track-active-color,
            var(--oxy-slider-track-color, #666));
      }
      #thumb {
        position: absolute;
        top: calc(50% - var(--oxy-slider-thumb-size, 14px) / 2);
        left: 0%;
        transform: translateX(-50%);

        background-color: var(--oxy-slider-thumb-color, #333);
        width: var(--oxy-slider-thumb-size, 14px);
        height: var(--oxy-slider-thumb-size, 14px);
        border-radius: var(--oxy-slider-thumb-radius, 4px);
      }
      :host(:active) #thumb {
        background-color: var(--oxy-slider-thumb-active-color,
            var(--oxy-slider-thumb-color, #333));
        transform: translateX(-50%) scale(1.2);
      }
    `;
    }
    firstUpdated() {
        this.setAttribute('role', 'slider');
        this.setAttribute('tabindex', '0');
        if (!this.shadowRoot)
            return;
        this.thumb = this.shadowRoot.getElementById('thumb');
        this.container = this.shadowRoot.getElementById('container');
    }
    updated(updatedProps) {
        if (updatedProps.has('min') || updatedProps.has('max')) {
            this.setAttribute('aria-valuemin', this.min.toString());
            this.setAttribute('aria-valuemax', this.max.toString());
        }
        if (updatedProps.has('value')) {
            this.value = Math.max(this.min, Math.min(this.max, this.value));
            this.setAttribute('aria-valuenow', this.value.toString());
            this.updateSlider();
            this.dispatchEvent(new CustomEvent('change', { detail: this.value }));
        }
        if (updatedProps.has('disabled')) {
            if (this.disabled) {
                this.setAttribute('aria-disabled', 'true');
            }
            else {
                this.removeAttribute('aria-disabled');
            }
        }
    }
    render() {
        return html `
      <div
          id="container"
          @mousedown=${this.onMouseDown}
          @mouseup=${this.onMouseUp}
          @mousemove=${this.onMouseMove}
          @mouseleave=${this.onMouseLeave}
          @mouseenter=${this.onMouseEnter}
          @touchstart=${this.onTouchStart}
          @touchend=${this.onTouchEnd}
          @touchmove=${this.onTouchMove}>
        <div id="track"></div>
        <div id="thumb"></div>
      </div>
    `;
    }
    onMouseDown(event) {
        this.dragging = true;
        this.onMouseMove(event);
    }
    onMouseUp() {
        this.dragging = false;
    }
    onMouseLeave(event) {
        this.dragging = false;
        this.buttons = event.buttons;
    }
    onMouseEnter(event) {
        if (event.buttons !== 0 && this.buttons === event.buttons) {
            this.dragging = true;
        }
    }
    onMouseMove(event) {
        if (!this.dragging)
            return;
        this.updateValueFromMouse(event.clientX);
    }
    onTouchStart(event) {
        this.dragging = true;
        this.onTouchMove(event);
    }
    onTouchEnd() {
        this.dragging = false;
    }
    onTouchMove(event) {
        if (!this.container || !this.dragging)
            return;
        if (event.touches.length < 1)
            return;
        this.updateValueFromMouse(event.touches[0].clientX);
    }
    updateValueFromMouse(clientX) {
        if (!this.container)
            return;
        const rect = this.container.getBoundingClientRect();
        const ratio = (clientX - rect.left) / (rect.right - rect.left);
        const value = Math.round(this.min + ratio * (this.max - this.min));
        this.value = value;
    }
    updateSlider() {
        if (!this.thumb)
            return;
        const ratio = (this.value - this.min) / (this.max - this.min);
        this.thumb.style.left = (100.0 * ratio) + '%';
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], OxySlider.prototype, "disabled", void 0);
__decorate([
    property({ type: Number })
], OxySlider.prototype, "min", void 0);
__decorate([
    property({ type: Number })
], OxySlider.prototype, "max", void 0);
__decorate([
    property({ type: Number })
], OxySlider.prototype, "value", void 0);
OxySlider = __decorate([
    customElement('oxy-slider')
], OxySlider);
export { OxySlider };
