var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSResult", ()=>n
);
parcelHelpers.export(exports, "adoptStyles", ()=>i
);
parcelHelpers.export(exports, "css", ()=>r
);
parcelHelpers.export(exports, "getCompatibleStyle", ()=>S
);
parcelHelpers.export(exports, "supportsAdoptingStyleSheets", ()=>t
);
parcelHelpers.export(exports, "unsafeCSS", ()=>s
);
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const t = window.ShadowRoot && ((void 0) === window.ShadyCSS || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, e = Symbol();
class n {
    constructor(t1, n1){
        if (n1 !== e) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        this.cssText = t1;
    }
    get styleSheet() {
        return t && (void 0) === this.t && (this.t = new CSSStyleSheet, this.t.replaceSync(this.cssText)), this.t;
    }
    toString() {
        return this.cssText;
    }
}
const s = (t2)=>new n(t2 + "", e)
, o = new Map, r = (t2, ...s1)=>{
    const r1 = s1.reduce((e1, s2, o1)=>e1 + ((t3)=>{
            if (t3 instanceof n) return t3.cssText;
            if ("number" == typeof t3) return t3;
            throw Error(`Value passed to 'css' function must be a 'css' function result: ${t3}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);
        })(s2) + t2[o1 + 1]
    , t2[0]);
    let i = o.get(r1);
    return (void 0) === i && o.set(r1, i = new n(r1, e)), i;
}, i = (e1, n2)=>{
    t ? e1.adoptedStyleSheets = n2.map((t2)=>t2 instanceof CSSStyleSheet ? t2 : t2.styleSheet
    ) : n2.forEach((t2)=>{
        const n3 = document.createElement("style");
        n3.textContent = t2.cssText, e1.appendChild(n3);
    });
}, S = t ? (t2)=>t2
 : (t2)=>t2 instanceof CSSStyleSheet ? ((t3)=>{
        let e1 = "";
        for (const n2 of t3.cssRules)e1 += n2.cssText;
        return s(e1);
    })(t2) : t2
;
