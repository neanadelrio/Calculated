var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OxyDemoElements", ()=>OxyDemoElements
);
parcelHelpers.export(exports, "OxyDemo", ()=>OxyDemo
);
var _lit = require("lit");
var _decorators = require("lit/decorators");
var _oxyIconShowcase = require("./oxy-icon-showcase");
var _oxyButton = require("../src/oxy-button");
var _oxyCheckbox = require("../src/oxy-checkbox");
var _oxyDialog = require("../src/oxy-dialog");
var _oxyIcon = require("../src/oxy-icon");
var _oxyIconsBase = require("../src/oxy-icons-base");
var _oxyInput = require("../src/oxy-input");
var _oxyTextarea = require("../src/oxy-textarea");
var _oxySlider = require("../src/oxy-slider");
var _oxyTabs = require("../src/oxy-tabs");
var _oxyTab = require("../src/oxy-tab");
function _decorate(decorators, factory, superClass, mixins) {
    var api = _getDecoratorsApi();
    if (mixins) for(var i = 0; i < mixins.length; i++)api = mixins[i](api);
    var r = factory(function initialize(O) {
        api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);
    api.initializeClassElements(r.F, decorated.elements);
    return api.runClassFinishers(r.F, decorated.finishers);
}
function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
        return api;
    };
    var api = {
        elementsDefinitionOrder: [
            [
                "method"
            ],
            [
                "field"
            ]
        ],
        initializeInstanceElements: function(O, elements) {
            [
                "method",
                "field"
            ].forEach(function(kind) {
                elements.forEach(function(element) {
                    if (element.kind === kind && element.placement === "own") this.defineClassElement(O, element);
                }, this);
            }, this);
        },
        initializeClassElements: function(F, elements) {
            var proto = F.prototype;
            [
                "method",
                "field"
            ].forEach(function(kind) {
                elements.forEach(function(element) {
                    var placement = element.placement;
                    if (element.kind === kind && (placement === "static" || placement === "prototype")) {
                        var receiver = placement === "static" ? F : proto;
                        this.defineClassElement(receiver, element);
                    }
                }, this);
            }, this);
        },
        defineClassElement: function(receiver, element) {
            var descriptor = element.descriptor;
            if (element.kind === "field") {
                var initializer = element.initializer;
                descriptor = {
                    enumerable: descriptor.enumerable,
                    writable: descriptor.writable,
                    configurable: descriptor.configurable,
                    value: initializer === void 0 ? void 0 : initializer.call(receiver)
                };
            }
            Object.defineProperty(receiver, element.key, descriptor);
        },
        decorateClass: function(elements, decorators) {
            var newElements = [];
            var finishers = [];
            var placements = {
                static: [],
                prototype: [],
                own: []
            };
            elements.forEach(function(element) {
                this.addElementPlacement(element, placements);
            }, this);
            elements.forEach(function(element) {
                if (!_hasDecorators(element)) return newElements.push(element);
                var elementFinishersExtras = this.decorateElement(element, placements);
                newElements.push(elementFinishersExtras.element);
                newElements.push.apply(newElements, elementFinishersExtras.extras);
                finishers.push.apply(finishers, elementFinishersExtras.finishers);
            }, this);
            if (!decorators) return {
                elements: newElements,
                finishers: finishers
            };
            var result = this.decorateConstructor(newElements, decorators);
            finishers.push.apply(finishers, result.finishers);
            result.finishers = finishers;
            return result;
        },
        addElementPlacement: function(element, placements, silent) {
            var keys = placements[element.placement];
            if (!silent && keys.indexOf(element.key) !== -1) throw new TypeError("Duplicated element (" + element.key + ")");
            keys.push(element.key);
        },
        decorateElement: function(element, placements) {
            var extras = [];
            var finishers = [];
            for(var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--){
                var keys = placements[element.placement];
                keys.splice(keys.indexOf(element.key), 1);
                var elementObject = this.fromElementDescriptor(element);
                var elementFinisherExtras = this.toElementFinisherExtras(decorators[i](elementObject) || elementObject);
                element = elementFinisherExtras.element;
                this.addElementPlacement(element, placements);
                if (elementFinisherExtras.finisher) finishers.push(elementFinisherExtras.finisher);
                var newExtras = elementFinisherExtras.extras;
                if (newExtras) {
                    for(var j = 0; j < newExtras.length; j++)this.addElementPlacement(newExtras[j], placements);
                    extras.push.apply(extras, newExtras);
                }
            }
            return {
                element: element,
                finishers: finishers,
                extras: extras
            };
        },
        decorateConstructor: function(elements, decorators) {
            var finishers = [];
            for(var i = decorators.length - 1; i >= 0; i--){
                var obj = this.fromClassDescriptor(elements);
                var elementsAndFinisher = this.toClassDescriptor(decorators[i](obj) || obj);
                if (elementsAndFinisher.finisher !== undefined) finishers.push(elementsAndFinisher.finisher);
                if (elementsAndFinisher.elements !== undefined) {
                    elements = elementsAndFinisher.elements;
                    for(var j = 0; j < elements.length - 1; j++)for(var k = j + 1; k < elements.length; k++){
                        if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) throw new TypeError("Duplicated element (" + elements[j].key + ")");
                    }
                }
            }
            return {
                elements: elements,
                finishers: finishers
            };
        },
        fromElementDescriptor: function(element) {
            var obj = {
                kind: element.kind,
                key: element.key,
                placement: element.placement,
                descriptor: element.descriptor
            };
            var desc = {
                value: "Descriptor",
                configurable: true
            };
            Object.defineProperty(obj, Symbol.toStringTag, desc);
            if (element.kind === "field") obj.initializer = element.initializer;
            return obj;
        },
        toElementDescriptors: function(elementObjects) {
            if (elementObjects === undefined) return;
            return _toArray(elementObjects).map(function(elementObject) {
                var element = this.toElementDescriptor(elementObject);
                this.disallowProperty(elementObject, "finisher", "An element descriptor");
                this.disallowProperty(elementObject, "extras", "An element descriptor");
                return element;
            }, this);
        },
        toElementDescriptor: function(elementObject) {
            var kind = String(elementObject.kind);
            if (kind !== "method" && kind !== "field") throw new TypeError("An element descriptor's .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"" + kind + '"');
            var key = _toPropertyKey(elementObject.key);
            var placement = String(elementObject.placement);
            if (placement !== "static" && placement !== "prototype" && placement !== "own") throw new TypeError("An element descriptor's .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"" + placement + '"');
            var descriptor = elementObject.descriptor;
            this.disallowProperty(elementObject, "elements", "An element descriptor");
            var element = {
                kind: kind,
                key: key,
                placement: placement,
                descriptor: Object.assign({
                }, descriptor)
            };
            if (kind !== "field") this.disallowProperty(elementObject, "initializer", "A method descriptor");
            else {
                this.disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");
                this.disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");
                this.disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");
                element.initializer = elementObject.initializer;
            }
            return element;
        },
        toElementFinisherExtras: function(elementObject) {
            var element = this.toElementDescriptor(elementObject);
            var finisher = _optionalCallableProperty(elementObject, "finisher");
            var extras = this.toElementDescriptors(elementObject.extras);
            return {
                element: element,
                finisher: finisher,
                extras: extras
            };
        },
        fromClassDescriptor: function(elements) {
            var obj = {
                kind: "class",
                elements: elements.map(this.fromElementDescriptor, this)
            };
            var desc = {
                value: "Descriptor",
                configurable: true
            };
            Object.defineProperty(obj, Symbol.toStringTag, desc);
            return obj;
        },
        toClassDescriptor: function(obj) {
            var kind = String(obj.kind);
            if (kind !== "class") throw new TypeError("A class descriptor's .kind property must be \"class\", but a decorator created a class descriptor with .kind \"" + kind + '"');
            this.disallowProperty(obj, "key", "A class descriptor");
            this.disallowProperty(obj, "placement", "A class descriptor");
            this.disallowProperty(obj, "descriptor", "A class descriptor");
            this.disallowProperty(obj, "initializer", "A class descriptor");
            this.disallowProperty(obj, "extras", "A class descriptor");
            var finisher = _optionalCallableProperty(obj, "finisher");
            var elements = this.toElementDescriptors(obj.elements);
            return {
                elements: elements,
                finisher: finisher
            };
        },
        runClassFinishers: function(constructor, finishers) {
            for(var i = 0; i < finishers.length; i++){
                var newConstructor = finishers[i](constructor);
                if (newConstructor !== undefined) {
                    if (typeof newConstructor !== "function") throw new TypeError("Finishers must return a constructor.");
                    constructor = newConstructor;
                }
            }
            return constructor;
        },
        disallowProperty: function(obj, name, objectType) {
            if (obj[name] !== undefined) throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
    };
    return api;
}
function _createElementDescriptor(def) {
    var key = _toPropertyKey(def.key);
    var descriptor;
    if (def.kind === "method") descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "get") descriptor = {
        get: def.value,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "set") descriptor = {
        set: def.value,
        configurable: true,
        enumerable: false
    };
    else if (def.kind === "field") descriptor = {
        configurable: true,
        writable: true,
        enumerable: true
    };
    var element = {
        kind: def.kind === "field" ? "field" : "method",
        key: key,
        placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;
    return element;
}
function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) other.descriptor.get = element.descriptor.get;
    else other.descriptor.set = element.descriptor.set;
}
function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function(other) {
        return other.kind === "method" && other.key === element.key && other.placement === element.placement;
    };
    for(var i = 0; i < elements.length; i++){
        var element = elements[i];
        var other;
        if (element.kind === "method" && (other = newElements.find(isSameElement))) {
            if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {
                if (_hasDecorators(element) || _hasDecorators(other)) throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) throw new ReferenceError("Decorators can't be placed on different accessors with for the same property (" + element.key + ").");
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else newElements.push(element);
    }
    return newElements;
}
function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}
function _isDataDescriptor(desc) {
    return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);
}
function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") throw new TypeError("Expected '" + name + "' to be a function");
    return value;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
let OxyDemoElements = _decorate([
    _decorators.customElement('oxy-demo-elements')
], function(_initialize, _LitElement) {
    class OxyDemoElements1 extends _LitElement {
        constructor(...args){
            super(...args);
            _initialize(this);
        }
    }
    return {
        F: OxyDemoElements1,
        d: [
            {
                kind: "field",
                static: true,
                key: "styles",
                value () {
                    return _lit.css`\n    :host {\n      display: flex;\n      flex-direction: column;\n\n      --light-theme-c1: #fcfcfc;\n      --light-theme-c2: #f9f9f9;\n      --light-theme-c3: #f3f3f3;\n      --light-theme-c4: #e0e0e0;\n      --light-theme-c5: #d0d0d0;\n      --light-theme-c6: #c0c0c0;\n\n      --dark-theme-c1: #19262e;\n      --dark-theme-c2: #253945;\n      --dark-theme-c3: #324d5c;\n      --dark-theme-c4: #3f6073;\n      --dark-theme-c5: #4b738a;\n      --dark-theme-c6: #5886a1;\n    }\n\n    :host([dark]) {\n      --oxy-scrollbar-track-color: var(--dark-theme-c2);\n      --oxy-scrollbar-thumb-color: var(--dark-theme-c5);\n      --oxy-scrollbar-thumb-hover-color: var(--dark-theme-c6);\n    }\n\n    h2 {\n      margin-top: 0;\n      align-self: center;\n    }\n\n    .paper-card {\n      display: flex;\n      flex-direction: column;\n      padding: 16px;\n      box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2),\n          0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\n    }\n    .paper-card:not(:last-child) {\n      margin-bottom: 32px;\n    }\n    :host([light]) .paper-card {\n      background-color: var(--light-theme-c3);\n    }\n    :host([dark]) .paper-card {\n      background-color: var(--dark-theme-c2);\n    }\n\n    .scrollable {\n      overflow: auto;\n    }\n\n    /* Button styles. */\n\n    #button {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    #button oxy-button {\n      min-width: 200px;\n      padding: 8px 16px;\n      margin: 8px;\n    }\n    :host([light]) #button oxy-button[raised] {\n      background: var(--light-theme-c1);\n    }\n    :host([dark]) #button oxy-button[raised] {\n      background: var(--dark-theme-c3);\n    }\n\n    /* Checkbox styles. */\n\n    #checkbox {\n      display: flex;\n      flex-direction: column;\n      align-self: center;\n    }\n    :host([light]) oxy-checkbox {\n      --oxy-checkbox-unchecked-background: white;\n    }\n    :host([dark]) oxy-checkbox {\n      --oxy-checkbox-unchecked-background: var(--dark-theme-c5);\n      --oxy-checkbox-unchecked-border: none;\n    }\n\n    /* Icon styles. */\n\n    #icons {\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: center;\n    }\n    #icons oxy-icon {\n      padding: 8px;\n    }\n    #iconbutton {\n      align-self: center;\n    }\n\n    /* Input styles. */\n\n    oxy-input {\n      padding: 4px 32px;\n    }\n    :host([light]) oxy-input {\n      --oxy-input-border: 2px solid var(--light-theme-c4);\n      --oxy-input-border-focused: 2px solid var(--light-theme-c6);\n    }\n    :host([dark]) oxy-input {\n      --oxy-input-background: var(--dark-theme-c2);\n      --oxy-input-border: 2px solid var(--dark-theme-c4);\n      --oxy-input-background-focused: var(--dark-theme-c2);\n      --oxy-input-border-focused: 2px solid var(--dark-theme-c6);\n    }\n\n    /* Textarea styles. */\n\n    oxy-textarea {\n      padding: 4px 32px;\n      height: 5em;\n    }\n    :host([light]) oxy-textarea {\n      --oxy-textarea-border: 2px solid var(--light-theme-c4);\n      --oxy-textarea-border-focused: 2px solid var(--light-theme-c6);\n    }\n    :host([dark]) oxy-textarea {\n      --oxy-textarea-background: var(--dark-theme-c2);\n      --oxy-textarea-border: 2px solid var(--dark-theme-c4);\n      --oxy-textarea-background-focused: var(--dark-theme-c2);\n      --oxy-textarea-border-focused: 2px solid var(--dark-theme-c6);\n    }\n\n    /* Slider styles. */\n\n    oxy-slider {\n      margin: 0 32px;\n    }\n    :host([dark]) oxy-slider {\n      --oxy-slider-track-color: var(--dark-theme-c5);\n      --oxy-slider-track-active-color: var(--dark-theme-c6);\n      --oxy-slider-thumb-color: white;\n    }\n\n    /* Tabs style. */\n\n    #tabs {\n    }\n    oxy-tabs:not(:last-child) {\n      margin-bottom: 16px;\n    }\n    oxy-tabs {\n      margin: 0 32px;\n    }\n    :host([light]) oxy-tabs {\n      --oxy-tabs-border-color: black;\n    }\n    :host([dark]) oxy-tabs {\n      --oxy-tabs-border: 1px solid gray;\n      --oxy-tab-indicator-color: #28f;\n    }\n\n    /* Icon dialog. */\n\n    :host([dark]) oxy-dialog {\n      --oxy-dialog-background: var(--dark-theme-c2);\n      --oxy-icon-name-color: lightgray;\n    }\n    oxy-dialog::part(dialog) {\n      display: flex;\n      flex-direction: column;\n      max-width: 750px;\n    }\n    oxy-icon-showcase {\n      text-align: center;\n    }\n  `;
                }
            },
            {
                kind: "field",
                decorators: [
                    _decorators.state()
                ],
                key: "iconDialogOpened",
                value () {
                    return false;
                }
            },
            {
                kind: "method",
                key: "render",
                value: function render() {
                    return _lit.html`\n      <div class="paper-card">\n        <h2>&lt;oxy-button&gt;</h2>\n        <div id="button">\n          <oxy-button @click=${()=>console.log('click')
                    }>Flat button</oxy-button>\n          <oxy-button raised>Raised button</oxy-button>\n          <oxy-button disabled>Disabled flat</oxy-button>\n          <oxy-button disabled raised>Disabled raised</oxy-button>\n        </div>\n      </div>\n\n      <div class="paper-card">\n        <h2>&lt;oxy-checkbox&gt;</h2>\n        <div id="checkbox">\n          <oxy-checkbox>Normal state</oxy-checkbox>\n          <oxy-checkbox checked>Checked state</oxy-checkbox>\n          <oxy-checkbox indeterminate>Indeterminate state</oxy-checkbox>\n          <oxy-checkbox disabled>Disabled state</oxy-checkbox>\n          <oxy-checkbox disabled checked>Disabled checked</oxy-checkbox>\n        </div>\n      </div>\n\n      <div class="paper-card">\n        <h2>&lt;oxy-icon&gt;</h2>\n        <div id="icons">\n          <oxy-icon icon="icons:accessibility"></oxy-icon>\n          <oxy-icon icon="icons:account-circle"></oxy-icon>\n          <oxy-icon icon="icons:add-alert"></oxy-icon>\n          <oxy-icon icon="icons:alarm"></oxy-icon>\n          <oxy-icon icon="icons:backup"></oxy-icon>\n          <oxy-icon icon="icons:block"></oxy-icon>\n          <oxy-icon icon="icons:bookmark"></oxy-icon>\n          <oxy-icon icon="icons:bug-report"></oxy-icon>\n          <oxy-icon icon="icons:cloud"></oxy-icon>\n        </div>\n        <oxy-button id="iconbutton" @click=${this.onOpenIconDialog}>\n          Show all icons\n        </oxy-button>\n      </div>\n\n      <div class="paper-card">\n        <h2>&lt;oxy-input&gt;</h2>\n        <oxy-input placeholder="Placeholder text"></oxy-input>\n        <oxy-input readonly value="Readonly"></oxy-input>\n        <oxy-input disabled value="Disabled"></oxy-input>\n      </div>\n\n\n      <div class="paper-card">\n        <h2>&lt;oxy-textarea&gt;</h2>\n        <oxy-textarea placeholder="Enter some text..."></oxy-textarea>\n      </div>\n\n      <div class="paper-card">\n        <h2>&lt;oxy-slider&gt;</h2>\n        <oxy-slider value="20" min="0" max="100"></oxy-slider>\n        <oxy-slider disabled value="20" min="0" max="100"></oxy-slider>\n      </div>\n\n      <div class="paper-card">\n        <h2>&lt;oxy-tabs&gt;</h2>\n        <div id="tabs">\n          <oxy-tabs>\n            <oxy-tab>Horizontal tab 1</oxy-tab>\n            <oxy-tab>Horizontal tab 2</oxy-tab>\n          </oxy-tabs>\n          <oxy-tabs orientation="vertical">\n            <oxy-tab>Vertical tab 1</oxy-tab>\n            <oxy-tab>Vertical tab 2</oxy-tab>\n          </oxy-tabs>\n        </div>\n      </div>\n\n      <oxy-dialog\n          backdrop\n          ?opened=${this.iconDialogOpened}\n          @closed=${this.onCloseIconDialog}>\n        <div class="scrollable">\n          <oxy-icon-showcase></oxy-icon-showcase>\n        </div>\n        <div slot="buttons">\n          <oxy-button @click=${this.onCloseIconDialog}>Close</oxy-button>\n        </div>\n      </oxy-dialog>\n    `;
                }
            },
            {
                kind: "method",
                key: "onOpenIconDialog",
                value: function onOpenIconDialog() {
                    this.iconDialogOpened = true;
                }
            },
            {
                kind: "method",
                key: "onCloseIconDialog",
                value: function onCloseIconDialog() {
                    console.log('closed');
                    this.iconDialogOpened = false;
                }
            }
        ]
    };
}, _lit.LitElement);
let OxyDemo = _decorate([
    _decorators.customElement('oxy-demo')
], function(_initialize2, _LitElement2) {
    class OxyDemo1 extends _LitElement2 {
        constructor(...args){
            super(...args);
            _initialize2(this);
        }
    }
    return {
        F: OxyDemo1,
        d: [
            {
                kind: "field",
                static: true,
                key: "styles",
                value () {
                    return _lit.css`\n    :host {\n      display: flex;\n      flex-direction: row;\n      min-height: 100vh;\n    }\n    oxy-demo-elements:not(:last-child) {\n      margin-right: 32px;\n    }\n    h1 {\n      margin-top: 0;\n      text-align: center;\n    }\n    #light-theme,\n    #dark-theme {\n      flex: 1;\n      padding: 32px;\n    }\n    #dark-theme {\n      background-color: #192626;\n      color: white;\n    }\n  `;
                }
            },
            {
                kind: "method",
                key: "render",
                value: function render() {
                    return _lit.html`\n      <div id="light-theme">\n        <h1>Light example</h1>\n        <oxy-demo-elements light></oxy-demo-elements>\n      </div>\n\n      <div id="dark-theme">\n        <h1>Dark example</h1>\n        <oxy-demo-elements dark></oxy-demo-elements>\n      </div>\n    `;
                }
            }
        ]
    };
}, _lit.LitElement);
