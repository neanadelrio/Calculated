var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html } from 'lit';
import { customElement, property, query } from 'lit/decorators';
/**
 * A simple dialog custom element.
 *
 * - Attribute 'backdrop': Makes a modal dialg (prevent clicks on background).
 * - Attribute 'noescape': Disables ESC key or click on backdrop to close.
 * - Attribute 'opened': Controls the open/closed state of the dialog.
 * - Call open() or close() to open/close the dialog.
 * - Events 'opened' and 'closed' are fired on open/close.
 *
 * Focus trapping is currently not implemented. Which means that focus can
 * leave the dialog, and focus is not reset after the dialog is closed.
 */
let OxyDialog = class OxyDialog extends LitElement {
    constructor() {
        super(...arguments);
        this.keyListener = this.onKeydown.bind(this);
        this.opened = false;
        this.heading = '';
        this.backdrop = false;
        this.noescape = false;
        this.showBackdrop = false;
    }
    static get styles() {
        return css `
      :host {
        display: none;
      }
      :host([opened]) {
        display: block;
      }
      #backdrop {
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: var(--oxy-dialog-backdrop-background, rgba(0, 0, 0, 0.3));
        z-index: 10;
      }
      #layout {
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 11;
        pointer-events: none;
      }
      #dialog {
        background: var(--oxy-dialog-background, white);
        color: var(--oxy-dialog-text-color, currentcolor);
        min-width: var(--oxy-dialog-min-width, 200px);
        max-width: var(--oxy-dialog-max-width, 500px);
        max-height: var(--oxy-dialog-max-height, 80%);
        flex-shrink: 0;
        box-shadow: var(--oxy-dialog-box-shadow, 0 8px 64px rgba(0, 0, 0, 0.5));
        border-radius: 4px;
        pointer-events: auto;
      }
      h2 {
        font-size: 1.2em;
        line-height: 2em;
        margin: 0;
        padding: 16px 16px 8px 16px;
      }
      slot[name="buttons"] {
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
        padding: 16px 8px 8px 8px;
      }
      [hidden] {
        display: none !important;
      }
    `;
    }
    updated(changedProps) {
        if (changedProps.has('opened')) {
            if (this.opened) {
                this.afterOpen();
            }
            else {
                this.afterClose();
            }
        }
    }
    render() {
        return html `
      <div
          id="backdrop"
          ?hidden=${!this.showBackdrop}
          @click=${this.onBackdropClick}>
      </div>

      <div id="layout">
        <div id="dialog" part="dialog">
          ${this.heading ? html `<h2>${this.heading}</h2>` : html ``}
          <slot></slot>
          <slot name="buttons"></slot>
        </div>
      </div>
    `;
    }
    open() {
        this.opened = true;
    }
    close() {
        this.opened = false;
    }
    afterOpen() {
        this.showBackdrop = this.backdrop;
        this.addKeyListener();
        this.saveAndMoveFocus();
        this.dispatchEvent(new CustomEvent('opened'));
    }
    afterClose() {
        this.showBackdrop = false;
        this.removeKeyListener();
        this.restoreFocus();
        this.dispatchEvent(new CustomEvent('closed'));
    }
    addKeyListener() {
        document.body.addEventListener('keydown', this.keyListener);
    }
    removeKeyListener() {
        document.body.removeEventListener('keydown', this.keyListener);
    }
    onBackdropClick() {
        if (!this.noescape) {
            this.close();
        }
    }
    onKeydown(event) {
        switch (event.key) {
            case 'Escape':
                event.preventDefault();
                this.onEscapePress();
                break;
            case 'Tab':
                event.preventDefault();
                this.onTabPress();
                break;
        }
    }
    onEscapePress() {
        if (!this.noescape) {
            this.close();
        }
    }
    // FIXME: Saving focus not implemented, document.activeElement does not
    // work across shadow DOMs.
    saveAndMoveFocus() {
        var _a;
        this.savedFocus = document.activeElement;
        while (true) {
            if (!((_a = this.savedFocus) === null || _a === void 0 ? void 0 : _a.shadowRoot))
                break;
            const activeElement = this.savedFocus.shadowRoot.activeElement;
            if (!activeElement)
                break;
            this.savedFocus = activeElement;
        }
        this.focus();
    }
    // FIXME: Restoring focus not implemented, see saveAndMoveFocus().
    restoreFocus() {
        var _a;
        (_a = this.savedFocus) === null || _a === void 0 ? void 0 : _a.focus();
    }
    // FIXME: Focus trap not implemented. There are two difficulties:
    // 1. A simple query selector does not work with shadow DOM
    // 2. The only real child of this shadow DOM is a slot.
    onTabPress() {
    }
};
__decorate([
    query('#backdrop')
], OxyDialog.prototype, "backdropElem", void 0);
__decorate([
    query('#dialog')
], OxyDialog.prototype, "dialogElem", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], OxyDialog.prototype, "opened", void 0);
__decorate([
    property({ type: String })
], OxyDialog.prototype, "heading", void 0);
__decorate([
    property({ type: Boolean })
], OxyDialog.prototype, "backdrop", void 0);
__decorate([
    property({ type: Boolean })
], OxyDialog.prototype, "noescape", void 0);
__decorate([
    property({ type: Boolean })
], OxyDialog.prototype, "showBackdrop", void 0);
OxyDialog = __decorate([
    customElement('oxy-dialog')
], OxyDialog);
export { OxyDialog };
